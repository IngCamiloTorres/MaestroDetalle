/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.maestrodetalle.GIU;

import com.maestrodetalle.Consola;
import java.awt.BorderLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;
import org.opencv.videoio.VideoWriter;

/**
 *
 * @author Emmanuel Martinez Si
 */
public class camaraConsola extends javax.swing.JFrame {
    private VideoCapture capture;
    private Timer timer;
    private byte[] bytes = null;
    private byte[] videoBytes = null;
    /**
     * Creates new form camaraConsola
     */
    public camaraConsola() {
        initComponents();
        tomarFoto.setVisible(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    private BufferedImage convertirABufferedImage(Mat mat) {
        int tipo = BufferedImage.TYPE_BYTE_GRAY;
        if (mat.channels() > 1) {
            tipo = BufferedImage.TYPE_3BYTE_BGR;
        }
        int tamañoBuffer = mat.channels() * mat.cols() * mat.rows();
        byte[] b = new byte[tamañoBuffer];
        mat.get(0, 0, b); // obtener todos los píxeles
        BufferedImage image = new BufferedImage(mat.cols(), mat.rows(), tipo);
        byte[] pixelesDestino = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, pixelesDestino, 0, b.length);
        return image;
    }
    public Image ajustarImagenCaptura(Image imagen) {
        
        imagen = imagen.getScaledInstance(labelImagenConsola.getWidth(),labelImagenConsola.getHeight(),Image.SCALE_SMOOTH);

        return imagen;
    }
    public byte[] devolverImagenConsola(){
        return bytes;
    }
    public byte[] devolverVideoConsola(){
        try {
            videoBytes = Files.readAllBytes(Paths.get("C:\\Users\\emman\\OneDrive\\Escritorio\\maestroDetalle\\maestroDetalle\\outputConsola.mp4"));
        } catch (IOException ex) {
            Logger.getLogger(empleadoGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return videoBytes;
    }
    public BufferedImage convertirAImage(Image image) {
        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = bufferedImage.createGraphics();
        g2.drawImage(image, 0, 0, null);
        g2.dispose();
        return bufferedImage;
    }
    public byte[] devolverImagen(String Ruta){
        BufferedImage bufferedImage = null;
            try {
                bufferedImage = ImageIO.read(new File(Ruta));
            } catch (IOException ex) {
                Logger.getLogger(empleadoGestion.class.getName()).log(Level.SEVERE, null, ex);
            }
            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            try {
                ImageIO.write(bufferedImage, "png", baos);
            } catch (IOException e) {
            }
        bytes = baos.toByteArray();
        return bytes;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentConsola = new javax.swing.JPanel();
        labelImagenConsola = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        seleccionarFoto = new javax.swing.JButton();
        abrirCamara = new javax.swing.JButton();
        tomarFoto = new javax.swing.JButton();
        grabarVideoConsola = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelImagenConsola.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setText("Foto del Empleado");

        seleccionarFoto.setText("Seleccionar Foto");
        seleccionarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarFotoActionPerformed(evt);
            }
        });

        abrirCamara.setText("Abrir Camara");
        abrirCamara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCamaraActionPerformed(evt);
            }
        });

        tomarFoto.setText("Tomar Foto");
        tomarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tomarFotoActionPerformed(evt);
            }
        });

        grabarVideoConsola.setText("Grabar Video");
        grabarVideoConsola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarVideoConsolaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout contentConsolaLayout = new javax.swing.GroupLayout(contentConsola);
        contentConsola.setLayout(contentConsolaLayout);
        contentConsolaLayout.setHorizontalGroup(
            contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentConsolaLayout.createSequentialGroup()
                .addGroup(contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentConsolaLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentConsolaLayout.createSequentialGroup()
                                .addComponent(grabarVideoConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(abrirCamara, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(tomarFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(seleccionarFoto)))
                    .addGroup(contentConsolaLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(contentConsolaLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(labelImagenConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 75, Short.MAX_VALUE))
        );
        contentConsolaLayout.setVerticalGroup(
            contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentConsolaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelImagenConsola, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seleccionarFoto)
                    .addComponent(abrirCamara))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tomarFoto)
                    .addComponent(grabarVideoConsola))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentConsola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCamaraActionPerformed
        tomarFoto.setVisible(true);
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        capture = new VideoCapture(0);
        
        // Iniciar el temporizador para actualizar la imagen en tiempo real
        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Mat frame = new Mat();
                if (capture.read(frame)) { // Leer un nuevo cuadro de la cámara
                    BufferedImage image = convertirABufferedImage(frame);
                    Image imagenEscalada = ajustarImagenCaptura(image); // Usar la función ajustarImagen para mantener la relación de aspecto
                    labelImagenConsola.setIcon(new ImageIcon(imagenEscalada));
                } else {

                    System.err.println("Error al leer un cuadro de la cámara");
                }
            }
        });
        timer.start();  
    }//GEN-LAST:event_abrirCamaraActionPerformed

    private void tomarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tomarFotoActionPerformed
            Mat frame = new Mat();
        if (capture.read(frame)) {
          // Convertir la imagen a BufferedImage
            
          BufferedImage image = convertirABufferedImage(frame);

          // Mostrar la imagen en el JLabel
          Image imagenEscalada = ajustarImagenCaptura(image);
          labelImagenConsola.setIcon(new ImageIcon(imagenEscalada));
          
          try {
            // Convertir la imagen escalada a bytes
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(convertirAImage(imagenEscalada), "jpg", baos);
            bytes = baos.toByteArray();
        } catch (IOException ex) {
            ex.printStackTrace();
            Logger.getLogger(empleadoGestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        } else {
          System.err.println("Error al leer un cuadro de la cámara");
        }
        timer.stop();
         
         capture.release();
    }//GEN-LAST:event_tomarFotoActionPerformed

    private void seleccionarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarFotoActionPerformed
        String Ruta = "";
        JFileChooser jFileChooser = new JFileChooser();
        FileNameExtensionFilter filtrado = new FileNameExtensionFilter("JPG, PNG & GIF","jpg","png","gif");
        jFileChooser.setFileFilter(filtrado);
        int respuesta = jFileChooser.showOpenDialog(this);
        if(respuesta == JFileChooser.APPROVE_OPTION){
            Ruta = jFileChooser.getSelectedFile().getPath();
            Image mImagen = new ImageIcon(Ruta).getImage();
            
            bytes = devolverImagen(Ruta);

            ImageIcon mIcon = new ImageIcon(mImagen.getScaledInstance(labelImagenConsola.getWidth(),labelImagenConsola.getHeight(),Image.SCALE_SMOOTH));
            labelImagenConsola.setIcon(mIcon);
        }
    }//GEN-LAST:event_seleccionarFotoActionPerformed

    private void grabarVideoConsolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarVideoConsolaActionPerformed
        //capture = new VideoCapture(0);
        long startTime = System.currentTimeMillis();

        if (!capture.isOpened()) {
            System.out.println("No se puede abrir la cámara.");
            return;
        }

        Mat frame = new Mat();
        capture.read(frame);

        VideoWriter writer = new VideoWriter("outputConsola.mp4", VideoWriter.fourcc('H', '2', '6', '4'), 30, frame.size());
        if (!writer.isOpened()) {
            System.out.println("No se puede abrir el archivo de salida.");
            return;
        }

        // Iniciar bucle de grabación
        while (capture.read(frame)) {
            // Capturar un fotograma
            BufferedImage image = convertirABufferedImage(frame);
            Image imagenEscalada = ajustarImagenCaptura(image); // Usar la función ajustarImagen para mantener la relación de aspecto
            labelImagenConsola.setIcon(new ImageIcon(imagenEscalada));

            // Escribir el fotograma en el archivo de video
            writer.write(frame);

            long elapsedTime = System.currentTimeMillis() - startTime;

            // Salir del bucle después de 10 segundos
            if (elapsedTime > 5000) {
                break;
            }
        }

        // Liberar recursos
        capture.release();
        writer.release();
        timer.stop();
    }//GEN-LAST:event_grabarVideoConsolaActionPerformed
    /*private void ShowPanel(JPanel p){
        p.setSize(776, 588);
        p.setLocation(0,0);
        
        contentConsola.removeAll();
        contentConsola.add(p, BorderLayout.CENTER);
        contentConsola.revalidate();
        contentConsola.repaint();
    }*/
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirCamara;
    private javax.swing.JPanel contentConsola;
    private javax.swing.JButton grabarVideoConsola;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel labelImagenConsola;
    private javax.swing.JButton seleccionarFoto;
    private javax.swing.JButton tomarFoto;
    // End of variables declaration//GEN-END:variables
}
